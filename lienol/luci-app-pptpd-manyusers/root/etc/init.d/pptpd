#!/bin/sh /etc/rc.common
# Copyright (C) 2018 Lienol <lienol@qq.com>

START=60
STOP=16
BIN=/usr/sbin/pptpd
DEFAULT=/etc/default/$BIN
RUN_D=/var/run
PID_F=$RUN_D/$BIN.pid
CONFIG=/var/etc/pptpd.conf
CHAP_SECRETS=/var/etc/chap-secrets
SERVER_NAME="pptp-server"
TEMP=/tmp/pptpd.tmp

setup_dns() {
	[ -n "$1" ] || return 0
	echo ms-dns $1>>/etc/ppp/options.pptpd
}
setup_login() {
	local section="$1"

	## Code by VPN Server ##
	config_get enabled "$section" enabled
	[ "$enabled" -eq 0 ] && return 0

	config_get ipaddress "$section" ipaddress
	[ -n "$ipaddress" ] || local ipaddress = "*"
	## Code by VPN Server ##

	config_get username "$section" username
	config_get password "$section" password
	[ -n "$username" ] || return 0
	[ -n "$password" ] || return 0

	echo "$username pptp-server $password $ipaddress" >> $CHAP_SECRETS
}

setup_config() {
	local section="$1"

	config_get enabled "$section" enabled
	config_get dns "$section" dns
	[ "$enabled" -eq 0 ] && return 1

	mkdir -p /var/etc
	cp /etc/pptpd.conf $CONFIG

	
	config_get localip "$section" localip
	config_get remoteip "$section" remoteip
	config_get export_interface "$section" export_interface
	
	[ -z "$localip" ] && localip=$(ifconfig br-lan 2>/dev/null | grep "inet addr:" | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+\."|head -1)2
	[ -z "$localip" ] && remoteip=$(ifconfig br-lan 2>/dev/null | grep "inet addr:" | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+\."|head -1)10-20
	options="cat /etc/pptpd.conf |grep options"
	[ -n "$localip" ] && echo "localip  $localip" >> $CONFIG
	[ -n "$remoteip" ] && echo "remoteip  $remoteip" >> $CONFIG
	[ -n "$options" ] && echo "option /etc/ppp/options.pptpd" >> $CONFIG
	
	## Code by VPN Server ##
	del_rule
	config_get mppe "$section" mppe
	if [ "$export_interface" != "none" ];then
		iptables -t nat -A POSTROUTING -s ${localip%.*}.0/24 -o ${export_interface} -m comment --comment "Rule For PPTPD" -j MASQUERADE
		iptables -A forwarding_rule -s ${localip%.*}.0/24 -m comment --comment "Rule For PPTPD" -j ACCEPT
	fi
	#iptables -I zone_wan_input 2 -p tcp --dport 1723 -j ACCEPT
	#iptables -A input_rule -i ppp+ -j ACCEPT
	#iptables -A output_rule -o ppp+ -j ACCEPT
	#iptables -A forwarding_rule -i ppp+ -j ACCEPT
	#iptables -A forwarding_rule -o ppp+ -j ACCEPT
	[ -n "$(cat "/etc/ppp/options.pptpd" |grep mppe)" ] && sed -i '/mppe/'d /etc/ppp/options.pptpd
	[ -z "$(cat "/etc/ppp/options.pptpd" |grep mppe)" ] && echo "mppe required,no40,no56,stateless" >> /etc/ppp/options.pptpd
	if [ "$mppe" -eq 0 ]; then
		sed -i -e 's/mppe/#mppe/g' /etc/ppp/options.pptpd
	fi
	sed -i -e '/ms-dns/d' /etc/ppp/options.pptpd
	setup_dns $dns
	echo ms-dns 223.5.5.5 >>/etc/ppp/options.pptpd
	## Code by VPN Server ##

	return 0
}

start_pptpd() {
	[ -f $DEFAULT ] && . $DEFAULT
	mkdir -p $RUN_D
	for m in arc4 sha1_generic slhc crc-ccitt ppp_generic ppp_async ppp_mppe; do
		insmod $m >/dev/null 2>&1
	done
	ln -sfn $CHAP_SECRETS /etc/ppp/chap-secrets
	chmod 600 /etc/ppp/*-secrets
	service_start $BIN $OPTIONS -c $CONFIG
}

del_rule(){
	pptp_nums=`iptables -t nat -L POSTROUTING 2> /dev/null|grep -c "Rule For PPTPD"`
	if [ -n "$pptp_nums" ]; then
		until [ "$pptp_nums" = 0 ]
		do
			pptp_rules=`iptables -t nat -L POSTROUTING --line-num 2> /dev/null|grep "Rule For PPTPD" |awk '{print $1}'`
			for pptp_rule in $pptp_rules
			do
					iptables -t nat -D POSTROUTING $pptp_rule 2> /dev/null
					break
			done
			pptp_nums=`expr $pptp_nums - 1`
		done
	fi
	nums=`iptables -L forwarding_rule 2> /dev/null|grep -c "Rule For PPTPD"`
	if [ -n "$nums" ]; then
		until [ "$nums" = 0 ]
		do
			rules=`iptables -L forwarding_rule --line-num 2> /dev/null|grep "Rule For PPTPD" |awk '{print $1}'`
			for rule in $rules
			do
					iptables -D forwarding_rule $rule 2> /dev/null
					break
			done
			nums=`expr $nums - 1`
		done
	fi
	#iptables -D zone_wan_input -p tcp -m tcp --dport 1723 -j ACCEPT  2>/dev/null
	#iptables -D input_rule -i ppp+ -j ACCEPT 2>/dev/null
	#iptables -D output_rule -o ppp+ -j ACCEPT 2>/dev/null
	#iptables -D forwarding_rule -i ppp+ -j ACCEPT 2>/dev/null
	#iptables -D forwarding_rule -o ppp+ -j ACCEPT 2>/dev/null
}

del_user()
{
	cat $CHAP_SECRETS | grep -v $SERVER_NAME > $TEMP
	cat $TEMP > $CHAP_SECRETS
	rm $TEMP
}

start() {
	config_load pptpd
	setup_config pptpd || return
	del_user
	config_foreach setup_login login
	start_pptpd
}

stop() {
	service_stop $BIN
	ps | grep "pppd local" | grep -v "grep" | awk '{print $1}' | xargs kill -9
	del_rule
	del_user
}
